<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Trading application based on service interface.</H3>

	Can be used to start the trading example with different
	initial configurations of buyer and seller agents.
-->
<applicationtype xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-application-2.5.xsd"
	name="Trading" package="trading"
	autoshutdown="true">
	
	<imports>
  		<import>trading.common.*</import>
		<import>java.util.*</import>
		<import>jadex.bridge.service.types.clock.IClockService</import>
		<import>jadex.bridge.service.search.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.bridge.service.*</import>
	</imports>
	
	<componenttypes>
		<componenttype name="Buyer" filename="trading.buyer/BuyerBDI.class"/>
		<componenttype name="Seller" filename="trading.seller/SellerBDI.class"/>
	</componenttypes>
	
	<properties>
		<property name="clock" class="IFuture">
			SServiceProvider.getService($component.getServiceProvider(), IClockService.class, RequiredServiceInfo.SCOPE_PLATFORM)
		</property>
	</properties>
	
	<configurations>
	
		<configuration name="One buyer and one seller (one order)">
			<components>
				<component type="Buyer" >
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+200000), 500, 670, true, $properties.clock,"strategy-2")
							}
						</argument>
					</arguments>
				</component>
				<component type="Seller">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+192500), 800, 580, false, $properties.clock,"strategy-2")
							}
						</argument>
					</arguments>
				</component>
			</components>
		</configuration>
		
		<configuration name="Two buyers and one seller">
			<components>
				<component type="Buyer" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+200000), 500, 680, true, $properties.clock,"strategy-2")
							}
						</argument>
					</arguments>
				</component>
				<component type="Buyer" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+200000), 500, 670, true, $properties.clock,"strategy-2")
							}
						</argument>
					</arguments>
				</component>
				<component type="Seller">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+192500), 800, 580, false, $properties.clock,"strategy-2")
							}
						</argument>
					</arguments>
				</component>
			</components>
		</configuration>
		
		<configuration name="one buyer and two sellers">
			<components>
			
				<component type="Buyer">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+200000), 500, 710, true, $properties.clock,"strategy-2")
							}
						</argument>
					</arguments>
				</component>
				
				<component type="Seller" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+192500), 800, 580, false, $properties.clock,"strategy-2")
							}
						</argument>
					</arguments>
				</component>
				
				<component type="Seller" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+192500), 800, 640, false, $properties.clock,"strategy-2")
							}
						</argument>
					</arguments>
				</component>
				
			</components>
			
		</configuration>
		
		<configuration name="one buyer and three sellers">
			<components>
			
				<component type="Buyer">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+60000), 500, 650, true, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				
				<component type="Seller" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+70000), 800, 620, false, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				
				<component type="Seller" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+60000), 785, 615, false, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				
				<component type="Seller" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+65000), 760, 600, false, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				
			</components>
			
		</configuration>
		
		<configuration name="Three buyers and one seller">
			<components>
				<component type="Buyer" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+60000), 500, 700, true, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				<component type="Buyer" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+61000), 550, 670, true, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				<component type="Buyer" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+63000), 525, 685, true, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				<component type="Seller">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents", new Date($properties.clock.getTime()+70000), 800, 650, false, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
			</components>
		</configuration>
				<configuration name="One buyer and one seller (Many Orders)">
			<components>
			
				<component type="Buyer">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents-1", new Date($properties.clock.getTime()+200000), 500, 700, true, $properties.clock,"strategy-3"),
								new Order("All about agents-2", new Date($properties.clock.getTime()+200000), 500, 750, true, $properties.clock,"strategy-3"),
								new Order("All about agents-3", new Date($properties.clock.getTime()+200000), 500, 720, true, $properties.clock,"strategy-3"),
								new Order("All about agents-4", new Date($properties.clock.getTime()+200000), 500, 710, true, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				
				<component type="Seller">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents-1", new Date($properties.clock.getTime()+200000), 800, 650, false, $properties.clock,"strategy-3"),
								new Order("All about agents-2", new Date($properties.clock.getTime()+200000), 800, 670, false, $properties.clock,"strategy-3"),
								new Order("All about agents-3", new Date($properties.clock.getTime()+200000), 800, 680, false, $properties.clock,"strategy-3"),
								new Order("All about agents-4", new Date($properties.clock.getTime()+200000), 800, 690, false, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				
			</components>
		</configuration>
		
				<configuration name="One buyer and many seller (Many Orders)">
			<components>
			
				<component type="Buyer">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents-1", new Date($properties.clock.getTime()+200000), 500, 700, true, $properties.clock,"strategy-3"),
								new Order("All about agents-2", new Date($properties.clock.getTime()+200000), 500, 750, true, $properties.clock,"strategy-3"),
								new Order("All about agents-3", new Date($properties.clock.getTime()+200000), 500, 720, true, $properties.clock,"strategy-3"),
								new Order("All about agents-4", new Date($properties.clock.getTime()+200000), 500, 710, true, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				
				<component type="Seller" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents-1", new Date($properties.clock.getTime()+200000), 800, 650, false, $properties.clock,"strategy-3"),
								new Order("All about agents-2", new Date($properties.clock.getTime()+200000), 800, 670, false, $properties.clock,"strategy-3"),
								new Order("All about agents-3", new Date($properties.clock.getTime()+200000), 800, 680, false, $properties.clock,"strategy-3"),
								new Order("All about agents-4", new Date($properties.clock.getTime()+200000), 800, 690, false, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
				<component type="Seller" number="1">
					<arguments>
						<argument name="initial_orders">
							new Order[]
							{
								new Order("All about agents-1", new Date($properties.clock.getTime()+200000), 790, 650, false, $properties.clock,"strategy-3"),
								new Order("All about agents-2", new Date($properties.clock.getTime()+200000), 780, 670, false, $properties.clock,"strategy-3"),
								new Order("All about agents-3", new Date($properties.clock.getTime()+200000), 770, 680, false, $properties.clock,"strategy-3"),
								new Order("All about agents-4", new Date($properties.clock.getTime()+200000), 760, 690, false, $properties.clock,"strategy-3")
							}
						</argument>
					</arguments>
				</component>
			</components>
		</configuration>
		
	</configurations>

</applicationtype>
